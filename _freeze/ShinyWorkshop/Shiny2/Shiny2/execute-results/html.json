{
  "hash": "f5bcb482f70357ca80c2163d72a761c7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Building Web-enabled Geospatial Analytics Application with Shiny: Beyond the basic\"\nsubtitle: \"\"  \nauthor: \"Dr. Kam Tin Seong<br/>Assoc. Professor of Information Systems\"\ninstitute: \"School of Computing and Information Systems,<br/>Singapore Management University\"\ndate: \"2024-07-28\"\nformat: \n  revealjs:\n    width: 1600\n    height: 900\n    show-notes: false\n    slide-number: true\n    show-slide-number: 'all'\ndate-format: \"DD MMM YYYY\"\nexecute: \n  freeze: true\neditor: visual\n---\n\n\n\n## Overview\n\nIn this lesson, selected advanced methods of Shiny will be discussed. You will also gain hands-on experiences on using these advanced methods to build Shiny applications.\n\nBy the end of this lesson, you will be able to:\n\n-   gain further understanding of the reactive feature of Shiny and Shiny's functions that support reactive flow,\n-   build interactive Shiny application by using plotly R and\n-   build static, interactive and reactive geovisualisation application by using tmap\n\n## Reactive Flow\n\nBy default, Shiny application is **Reactive**!\n\n![](img/image12.jpg)\n\n------------------------------------------------------------------------\n\n### Reactive Flow - the basic\n\nThe user selects an input, this input goes through some expression in the server, and an output is rendered. Each time the user changes their input selection, the expression that generates the output will automatically re-execute, and the relevant output will be re-rendered based on the new value of the input.\n\nIn a Shiny application, there's no need to explictly describe the relationships between inputs and outputs and tell R what to do when each input changes, Shiny automatically handles these details for you.\n\n![](img/image11.jpg)\n\n::: {style=\"font-size: 0.75em\"}\nSource: [Module 2](https://minecr.shinyapps.io/02-flow/#section-reactive-flow) of [Building Web Applications with Shiny](https://rstudio-education.github.io/shiny-course/)\n:::\n\n------------------------------------------------------------------------\n\n### Reactive Flow - The full features\n\n![](img/image1.jpg)\n\n------------------------------------------------------------------------\n\n### Reactive elements\n\n::: columns\n::: {.column width=\"60%\"}\nThree components of reactive execution in Shiny are:\n\n-   reactive inputs,\n-   reactive expressions, and\n-   reactive outputs.\n\n![](img/image13.jpg)\n:::\n:::\n\n------------------------------------------------------------------------\n\n### Reactive elements\n\n::: {style=\"font-size: 0.85em\"}\n::: columns\n::: {.column width=\"50%\"}\n#### Reactive inputs and outputs\n\n-   A **reactive input** is a user input that comes through a browser interface, typically.\n-   A **reactive output** is something that appears in the user's browser window, such as a plot or a table of values.\n\n![](img/image14.jpg)\n\n-   One reactive input can be connected to multiple outputs, and vice versa. For example we might have a UI input widget for filtering out data based on user's selection, and the filtered data can be used in multiple outputs like plots and summaries.\n:::\n\n::: {.column width=\"50%\"}\n#### Reactive expressions\n\n-   A **reactive expressions** is component between an input and an output.\n\n-   It can both be a dependent (i.e be a child) and have dependents (i.e. be a parent).\n\n![](img/image15.jpg)\n:::\n:::\n:::\n\n## In-class Exercise: Building a reactive scatter plot using Shiny\n\n::: columns\n::: {.column width=\"50%\"}\nIn this in-class exercise, you are going to explore advanced reactive features.\n\nTo get started, you need to do the followings:\n\n-   start a new Shiny Application\n-   load the necessary R package, namely Shiny and tidyverse\n-   import the data file (i.e. Exam_data.csv )\n-   build a basic scatterplot look similar to the figure on the right.\n:::\n\n::: {.column width=\"50%\"}\n![](img/image16.jpg)\n:::\n:::\n\n------------------------------------------------------------------------\n\n### The UI\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(tidyverse)\nexam <- read_csv(\"data/Exam_data.csv\")\nui <- fluidPage(\n    titlePanel(\"Subject Correlation Analysis\"),\n    sidebarLayout(\n        sidebarPanel(\n            selectInput(inputId = \"yvariable\",\n                        label = \"y Variable:\",\n                        choices = c(\"English\" = \"ENGLISH\",\n                                    \"Maths\" = \"MATHS\",\n                                    \"Science\" = \"SCIENCE\"),\n                        selected = \"MATHS\"),\n            selectInput(inputId = \"xvariable\",\n                        label = \"x Variable:\",\n                        choices = c(\"English\" = \"ENGLISH\",\n                                    \"Maths\" = \"MATHS\",\n                                    \"Science\" = \"SCIENCE\"),\n                        selected = \"SCIENCE\")\n        ),\n        mainPanel(\n            plotOutput(\"scatterPlot\")\n        )\n    )\n)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n### The server\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output, session){    \n    output$scatterPlot <- renderPlot({\n        ggplot(data=exam,\n               aes_string(x = input$xvariable,      \n                          y = input$yvariable)) +   \n                   geom_point()\n    })\n}\n```\n:::\n\n\n\nLastly, do not forget to add this line!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp (ui=ui, server=server)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n### Stop-trigger-delay\n\nIn this section, you will learn how to how to stop, trigger, and delay Shiny actions.\n\n-   Using `submitButton()`\n-   Using `isolate()` and `actionButton()`\n\n------------------------------------------------------------------------\n\n### Working with `submitButton()`\n\n![](img/image17.jpg)\n\n------------------------------------------------------------------------\n\n### Working with `submitButton()`\n\n-   `submitButton()` is used when you want to delay a reaction.\n\n-   Edit the code as shown below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"7\"}\n            selectInput(inputId = \"xvariable\",\n                        label = \"x Variable:\",\n                        choices = c(\"English\" = \"ENGLISH\",\n                                    \"Maths\" = \"MATHS\",\n                                    \"Science\" = \"SCIENCE\"),\n                        selected = \"SCIENCE\"),\n            submitButton(\"Apply changes\")\n```\n:::\n\n\n\nNote: The use of `submitButton()` is generally discouraged in favor of the more versatile `actionButton()`.\n\nReference: [submitButton](https://shiny.rstudio.com/reference/shiny/latest/submitButton.html).\n\n------------------------------------------------------------------------\n\n### Isolating reactions\n\n#### When to use?\n\n::: columns\n::: {.column width=\"50%\"}\n-   Suppose your app has an input widget where users can enter text for the title of the plot. However you only want the title to update if any of the other inputs that go into the plot change. You can achieve this by isolating the plot title such that:\n    -   When input$x or input$y changes, the plot will update.\n    -   But when only the title input (input\\$plot_title) changes, the plot will not update.\n:::\n\n::: {.column width=\"50%\"}\n![](img/image19.jpg)\n:::\n:::\n\nReference: [isolation](https://shiny.rstudio.com/articles/isolation.html)\n\n------------------------------------------------------------------------\n\n### Working with `isolate()` and `actionButton()`\n\n-   At the ui, edit the code as shown below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"7-11\"}\n            selectInput(inputId = \"xvariable\",\n                        label = \"x Variable:\",\n                        choices = c(\"English\" = \"ENGLISH\",\n                                    \"Maths\" = \"MATHS\",\n                                    \"Science\" = \"SCIENCE\"),\n                        selected = \"SCIENCE\"),\n            textInput(                       \n                inputId = \"plot_title\",     \n                label = \"Plot title\",       \n                placeholder = \"Enter text to be used as plot title\"), \n            actionButton(\"goButton\", \"Go!\") \n```\n:::\n\n\n\n-   Reference guide on [`textInput()`](https://shiny.rstudio.com/reference/shiny/1.6.0/textInput.html)\n-   Reference guide on [`actionButton()`](https://shiny.rstudio.com/reference/shiny/1.6.0/actionButton.html)\n\n------------------------------------------------------------------------\n\n### Working with `isolate()` and `actionButton()`\n\n-   At the server side, edit the codes as shown below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3,9-11\"}\nserver <- function(input, output, session){\n    output$scatterPlot <- renderPlot({\n        input$goButton                           \n        \n        ggplot(data=exam,\n               aes_string(x = input$xvariable,\n                          y = input$yvariable)) +\n            geom_point() +\n            labs(title = isolate({               \n                toTitleCase(input$plot_title)    \n            }))                                  \n    })\n}\n```\n:::\n\n\n\n-   Reference guide on [`isolate()`](https://shiny.rstudio.com/reference/shiny/1.6.0/isolate.html)\n\n## Embedding Interactive Graphs in R Shiny\n\n### The **plotly** way\n\n::: columns\n::: {.column width=\"50%\"}\nTwo approaches: - Using plotly directly, or - Plot the basic visualisation using **ggplot2**, then wrap the visualisation object into plotly object using `ggplotly()`.\n\nReference: - [Plotly R Open Source Graphing Library](https://plotly.com/r/) - [17 Server-side linking with shiny](https://plotly-r.com/linking-views-with-shiny.html) of [Interactive web-based data visualization with R, plotly, and shiny](https://plotly-r.com/index.html)\n:::\n\n::: {.column width=\"50%\"}\n![](img/image20.jpg)\n:::\n:::\n\n------------------------------------------------------------------------\n\n### In-class Exercise: Embedding an interactive scatter plot in Shiny\n\n::: columns\n::: {.column width=\"50%\"}\n-   Install plotly R package if it has yet to be install in RStudio.\n-   include a new line as shown below to launch plotly library.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2,\"}\nlibrary(shiny)\nlibrary(plotly) \nlibrary(tidyverse)\n```\n:::\n\n\n\n-   At UI, edit the code as shown below\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\n mainPanel(\n    plotlyOutput(\"scatterPlot\") \n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n-   edit the server section of the Shiny app as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nserver <- function(input, output){\n    output$scatterPlot <- renderPlotly({ #<<\n        \n      p <- ggplot(data = exam, \n            aes_string(x = input$xvariable,\n                       y = input$yvariable)) +\n            geom_point(color=\"grey 10\", \n                       size=1)\n        \n            ggplotly(p) #<<                           \n    })\n}\n```\n:::\n\n\n:::\n:::\n\n------------------------------------------------------------------------\n\n### In-class Exercise: Embedding an interactive bar chart in Shiny\n\nIn this exercise, you will learn how going to embed an interactive bar chart in Shiny by using plotly. The output will look similar to the figure below.\n\n![](img/image21.jpg)\n\n------------------------------------------------------------------------\n\n### In-class Exercise: Embedding an interactive bar chart in Shiny\n\n::: columns\n::: {.column width=\"50%\"}\nThe ui:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(plotly)\nlibrary(tidyverse)\n\nexam <- read_csv(\"data/Exam_data.csv\")\n\nui <- fluidPage(\n    titlePanel(\"Pupils Profile\"),\n    mainPanel(\n            plotlyOutput(\"race\"),\n        )\n    )\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\nThe server:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output) {\n    output$race <- renderPlotly({\n        p <- ggplot(data=exam, \n                    aes(x=RACE)) +\n            geom_bar()\n        ggplotly(p)\n    })\n}\n```\n:::\n\n\n\nLast but not least the app\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp (ui=ui, server=server)\n```\n:::\n\n\n:::\n:::\n\n## In-class Exercise: Embedding a drill-down bar chart in Shiny\n\nIn this exercise, you will learn how to embed a drill-down bar chart in Shiny by using [`event_data()`](https://search.r-project.org/CRAN/refmans/plotly/html/event_data.html) of plotly.\n\n![](img/image22.jpg)\n\n------------------------------------------------------------------------\n\n### In-class Exercise: Embedding a drill-down bar chart in Shiny\n\n::: columns\n::: {.column width=\"50%\"}\nThe ui:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(plotly)\nlibrary(tidyverse)\n\nexam <- read_csv(\"data/Exam_data.csv\")\n\nui <- fluidPage(\n    titlePanel(\"Drill-down Bar Chart\"),\n    mainPanel(\n            plotlyOutput(\"race\"),\n            plotlyOutput(\"gender\"),\n            verbatimTextOutput(\"info\")\n        )\n    )\n```\n:::\n\n\n\nVisit this [link](https://www.marsja.se/how-to-use-in-in-r/) to learn more about %in%.\n:::\n\n::: {.column width=\"50%\"}\nThe server:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output) {\n    output$race <- renderPlotly({\n        p <- ggplot(data=exam, \n                    aes(x=RACE)) +\n            geom_bar()\n        ggplotly(p)\n    })\n    output$gender <- renderPlotly({\n        d <- event_data(\"plotly_click\") #<<\n        if (is.null(d)) return(NULL) #<<\n        \n        p <- exam %>% \n            filter(RACE %in% d$x) %>%  #<<\n            ggplot(aes(x=GENDER)) +\n            geom_bar() \n        ggplotly(p) %>%\n            layout(xaxis = list(title = d$x)) #<<\n    })\n    output$info <- renderPrint({\n        event_data(\"plotly_click\") #<<\n    })    \n}\n```\n:::\n\n\n:::\n:::\n\n------------------------------------------------------------------------\n\n### In-class Exercise: Embedding a drill-down bar chart in Shiny (Revised version)\n\n::: columns\n::: {.column width=\"50%\"}\nThe ui:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(plotly)\nlibrary(tidyverse)\n\nexam <- read_csv(\"data/Exam_data.csv\")\n\nui <- fluidPage(\n    titlePanel(\"Drill-down Bar Chart\"),\n    mainPanel(\n            plotlyOutput(\"race\"),\n            plotlyOutput(\"gender\"),\n            verbatimTextOutput(\"info\")\n        )\n    )\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\nThe server:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output) {\n    output$race <- renderPlotly({\n        p <- exam %>% #<<\n            plot_ly(x = ~RACE) #<<\n    })\n\n    output$gender <- renderPlotly({\n        d <- event_data(\"plotly_click\")\n        if (is.null(d)) return(NULL)\n        \n        p <- exam %>% \n            filter(RACE %in% d$x) %>% \n            ggplot(aes(x=GENDER)) +\n            geom_bar() \n        ggplotly(p) %>%\n            layout(xaxis = list(title = d$x))\n    })\n\n    output$info <- renderPrint({\n        event_data(\"plotly_click\")\n    })    \n}\n```\n:::\n\n\n:::\n:::\n\n## In-class Exercise: Embedding A Static Map in Shiny\n\nIn this exercise, you will learn how to embed a static map in Shiny by using *renderPlot()*. By the end of this exercise, you will be able to plot a static map on Shiny display as shown below.\n\n![](img/image23.jpg)\n\n------------------------------------------------------------------------\n\n### In-class Exercise: Embedding A Static Map in Shiny\n\n::: columns\n::: {.column width=\"50%\"}\n#### Setting up\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(sf)\nlibrary(tmap)\nlibrary(tidyverse)\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n#### Importing the geospatial data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n:::\n\n\n:::\n:::\n\n------------------------------------------------------------------------\n\n### In-class Exercise: Embedding a static map in Shiny\n\nThe UI codes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n    titlePanel(\"A simple map display\"),\n    sidebarLayout(\n        sidebarPanel(\n            checkboxInput(inputId = \"show_data\",\n                          label = \"Show data table\",\n                          value = TRUE)\n        ),\n        mainPanel(\n            plotOutput(\"mapPlot\"),\n            DT::dataTableOutput(outputId = \"szTable\")\n        )\n    )\n)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n### In-class Exercise: Embedding a static map in Shiny\n\nThe Server codes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output){\n    output$mapPlot <- renderPlot({\n        tm_shape(mpsz)+\n            tm_fill() +\n            tm_borders(lwd = 0.1,  alpha = 1)\n    })\n    \n    output$szTable <- DT::renderDataTable({\n        if(input$show_data){\n            DT::datatable(data = mpsz %>% select(1:7),\n                          options= list(pageLength = 10),\n                          rownames = FALSE)\n        }\n    })    \n}\n```\n:::\n\n\n\n::: callout-important\nImportant, don't miss out this line\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp (ui=ui, server=server)\n```\n:::\n\n\n:::\n\n## In-class Exercise: Building a choropleth mapping application\n\nIn this exercise, you will learn how to build a choropleth mapping application by using tmap and Shiny.\n\n![](img/image24.jpg)\n\n------------------------------------------------------------------------\n\n### In-class Exercise: Building a choropleth mapping application\n\nEdit the code as shown below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(sf)\nlibrary(tmap)\nlibrary(tidyverse)\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\npopagsex <- read_csv(\"data/aspatial/respopagsex2000to2018.csv\") #<<\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n### In-class Exercise: Building a choropleth mapping application\n\nEdit the codes as shown below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopagsex2018_male <- popagsex %>%\n    filter(Sex == \"Males\") %>%\n    filter(Time == 2018) %>%\n    spread(AG, Pop) %>%\n    mutate(YOUNG = `0_to_4`+`5_to_9`+`10_to_14`+\n               `15_to_19`+`20_to_24`) %>%\n    mutate(`ECONOMY ACTIVE` = rowSums(.[9:13])+\n               rowSums(.[15:17]))%>%\n    mutate(`AGED`=rowSums(.[18:22])) %>%\n    mutate(`TOTAL`=rowSums(.[5:22])) %>%  \n    mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n           /`ECONOMY ACTIVE`) %>%\n    mutate_at(.vars = vars(PA, SZ), \n              .funs = funs(toupper)) %>%\n    select(`PA`, `SZ`, `YOUNG`, \n           `ECONOMY ACTIVE`, `AGED`, \n           `TOTAL`, `DEPENDENCY`) %>%\n    filter(`ECONOMY ACTIVE` > 0)\nmpsz_agemale2018 <- left_join(mpsz,\n                              popagsex2018_male,\n                              by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n### In-class Exercise: Building a choropleth mapping application\n\nAt the UI, edit the codes as shown below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n    titlePanel(\"Choropleth Mapping\"),\n    sidebarLayout(\n        sidebarPanel(\n            selectInput(inputId = \"classification\",\n                        label = \"Classification method:\",\n                        choices = list(\"fixed\" = \"fixed\", \n                                       \"sd\" = \"sd\", \n                                       \"equal\" = \"equal\", \n                                       \"pretty\" = \"pretty\", \n                                       \"quantile\" = \"quantile\", \n                                       \"kmeans\" = \"kmeans\", \n                                       \"hclust\" = \"hclust\", \n                                       \"bclust\" = \"bclust\", \n                                       \"fisher\" = \"fisher\", \n                                       \"jenks\" = \"jenks\"),\n                        selected = \"pretty\"),\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n### In-class Exercise: Building a choropleth mapping application\n\nAt the UI, continue edit the codes as shown below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n            sliderInput(inputId = \"classes\",\n                        label = \"Number of classes\",\n                        min = 6,\n                        max = 12,\n                        value = c(6)),\n            selectInput(inputId = \"colour\",\n                        label = \"Colour scheme:\",\n                        choices = list(\"blues\" = \"Blues\", \n                                       \"reds\" = \"Reds\", \n                                       \"greens\" = \"Greens\",\n                                       \"Yellow-Orange-Red\" = \"YlOrRd\",\n                                       \"Yellow-Orange-Brown\" = \"YlOrBr\",\n                                       \"Yellow-Green\" = \"YlGn\",\n                                       \"Orange-Red\" = \"OrRd\"),\n                        selected = \"YlOrRd\")\n        ),\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n### In-class Exercise: Building a choropleth mapping application\n\nAt the server, edit the codes as shown below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output){\n    output$mapPlot <- renderPlot({\n        tm_shape(mpsz_agemale2018)+ #<<\n            tm_fill(\"DEPENDENCY\",  #<<\n                    n = input$classes, #<<\n                    style = input$classification, #<<\n                    palette = input$colour) + #<<\n            tm_borders(lwd = 0.1,\n                       alpha = 1)\n        })\n}\n```\n:::\n\n\n\n::: callout-important\nA gentle reminder,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp (ui=ui, server=server)\n```\n:::\n\n\n:::\n\n## Embedding an interactive map in Shiny\n\nIn this exercise, you will learn how to embed an interactive map in Shiny by using `renderTmap()` and `tmapOutput()` of **tmap** package. The interactive map is a proportional symbol map showing distribution of winnings by branches/outlets.\n\n![](img/image25.jpg)\n\n------------------------------------------------------------------------\n\n### Setting up\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(sf)\nlibrary(tmap)\nlibrary(tidyverse)\n```\n:::\n\n\n\n### Importing the geospatial data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsgpools <- read_csv(\"data/aspatial/SGPools_svy21.csv\")\nsgpools_sf <- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \n                                  \"YCOORD\"),\n                       crs= 3414)\n```\n:::\n\n\n\n::: {callout-note}\n### Things to learn from the code chunk above:\n\n-   [`st_as_sf()`](https://r-spatial.github.io/sf/reference/st_as_sf.html) of sf package is used to convert the tibble data frame into simple feature data frame by using values from the XCOORD and YCOORD fields. The crs argument is used to specify the projected coordinates systems (i.e. svy21 for Singapore).\n:::\n\n------------------------------------------------------------------------\n\n### The ui\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n    titlePanel(\"Interactive Map View\"),\n    sidebarLayout(\n        sidebarPanel(\n            checkboxInput(inputId = \"showData\",\n                          label = \"Show data table\",\n                          value = TRUE)\n        ),\n        mainPanel(\n            tmapOutput(\"mapPlot\"), #<<\n            DT::dataTableOutput(outputId = \"aTable\")\n        )\n    )\n)\n```\n:::\n\n\n\n::: callout-note\nNotice that `tmapout()` is used instead of `plotOutput()`.\n:::\n\n------------------------------------------------------------------------\n\n### The server\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output, session){\n    output$mapPlot <- renderTmap({   #<<\n        tm_shape(sgpools_sf)+\n            tm_bubbles(col = \"OUTLET TYPE\",\n                       size = \"Gp1Gp2 Winnings\",\n                       border.col = \"black\",\n                       border.lwd = 0.5)\n    })\n    \n    output$aTable <- DT::renderDataTable({\n        if(input$showData){\n            DT::datatable(data = sgpools_sf %>% \n                            select(1:4),\n                          options= list(pageLength = 10),\n                          rownames = FALSE)\n        }\n    })    \n}\n```\n:::\n\n\n\n::: callout-note\nNotice that [`renderTmap()`](https://rdrr.io/cran/tmap/man/renderTmap.html) is used instead of `renderPlot()`.\n:::\n\n## In-class Exercise: Reactive Map in R Shiny\n\nIn this exercise, you will learn how to create reactive map in Shiny. The output will look similar to the figure below.\n\n![](img/image26.jpg)\n\n------------------------------------------------------------------------\n\n### The ui\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n    titlePanel(\"Reactive Map\"),\n    sidebarLayout(\n        sidebarPanel(\n            selectInput(inputId = \"type\",\n                        label = \"Branch or Outlet?\",\n                        choices = c(\"branch\" = \"Branch\",\n                                    \"outlet\" = \"Outlet\"),\n                        selected = \"Branch\",\n                        multiple = TRUE),\n            sliderInput(inputId = \"winning\", \n                        label = \"Number of winnings\", \n                        min = 2,\n                        max = 80, \n                        value = 20),\n            checkboxInput(inputId = \"showData\",\n                          label = \"Show data table\",\n                          value = TRUE)\n        ),\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n### The ui (continue)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n        mainPanel(\n            tmapOutput(\"mapPlot\"),\n            DT::dataTableOutput(outputId = \"aTable\")\n        )\n    )\n)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n### The server\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output, session){\n    dataset = reactive({ #<<                   \n        sgpools_sf %>% #<<\n            filter(TYPE == input$type) %>% #<<\n            filter(WINNINGS > input$winning) #<<\n    })\n    \n    output$mapPlot <- renderTmap({\n        tm_shape(shp = dataset(), #<<\n                 bbox = st_bbox(sgpools_sf))+ #<<\n            tm_bubbles(col = \"TYPE\",\n                       size = \"WINNINGS\",\n                       border.col = \"black\",\n                       border.lwd = 0.5)\n    })\n```\n:::\n\n\n\n::: callout-note\n### Things to learn from the code chunk above:\n\n-   [`reactive()`](https://shiny.rstudio.com/reference/shiny/1.6.0/reactive.html) is used to create a reactive expression (i.e. dataset) that hold the extracted data set.\n-   *bbox = `st_bbox()`* argument is used to fix the extend of the map view.\n:::\n\n------------------------------------------------------------------------\n\n### The server (continue)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n    output$aTable <- DT::renderDataTable({\n        if(input$showData){\n            DT::datatable(data = dataset() %>% #<<\n                              select(1:4),\n                          options= list(pageLength = 10),\n                          rownames = FALSE)\n        }\n    })    \n}\n```\n:::\n\n\n\n::: callout-important\nAlso, don't forget this magic line!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp (ui=ui, server=server)\n```\n:::\n\n\n:::\n\n## References\n\n-   Hadley Wickham (2020) **Mastering Shiny: Build Interactive Apps, Reports, and Dashboards Powered by R** online version\n    -   [Chapter 3 Basic reactivity](https://mastering-shiny.org/basic-reactivity.html)\n    -   [Chapter 13 Why reactivity?](https://mastering-shiny.org/reactive-motivation.html)\n    -   [Chapter 14 The reactive graph](https://mastering-shiny.org/reactive-graph.html)\n    -   [Chapter 15 Reactive building blocks](https://mastering-shiny.org/reactivity-objects.html)\n    -   [Chapter 16 Escaping the graph](https://mastering-shiny.org/reactivity-components.html)\n-   Carson Sievert (2019) **Interactive web-based data visualization with R, plotly, and shiny**, online version.\n    -   [Chapter 17 Server-side linking with shiny](https://plotly-r.com/linking-views-with-shiny.html)\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}