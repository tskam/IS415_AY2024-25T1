{
  "hash": "4e759029e2feaf16e8e6f03611387f1e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Building Web-enabled Geospatial Analytics Applications with Shiny: Shiny basic\"\nsubtitle: \"\"  \nauthor: \"Dr. Kam Tin Seong<br/>Assoc. Professor of Information Systems\"\ninstitute: \"School of Computing and Information Systems,<br/>Singapore Management University\"\ndate: \"2024-07-28\"\nformat: \n  revealjs:\n    width: 1600\n    height: 900\n    show-notes: false\n    slide-number: true\n    show-slide-number: 'all'\ndate-format: \"DD MMM YYYY\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  warning: false\n  freeze: true\neditor: visual\n---\n\n\n\n## Content\n\n-   What is a Web-enabled Geospatial Analytics Application?\n\n-   Why building Web-enabled Geospatial Analytical Application?\n\n-   Evolution of web-based Technology\n\n-   Getting to Know Shiny\n\n## What is a Web-enabled Geospatial Analytics Application?\n\n::: columns\n::: {.column width=\"40%\"}\n-   Focuses and emphasises on **interactivity** and effective integration of techniques from **data analytics, visualization and human-computer interaction (HCI)**.\n:::\n\n::: {.column width=\"60%\"}\n![](img/image1.jpg)\n:::\n:::\n\n------------------------------------------------------------------------\n\n### Why building a Web-enabled Geospatial Analytics Application?\n\n::: columns\n::: {.column width=\"50%\"}\n-   To explore how the best of these different but related domains can be combined such that **the sum is greater than the parts**.\n\n-   To **democratise data and analytics** through web-based analytical applications for data exploration, visualisation analysis and modelling.\n:::\n\n::: {.column width=\"50%\"}\n![](img/image2.jpg)\n\n::: {style=\"font-size: 0.75em\"}\nSource: [Democratize data analytics customer data platform](https://www.rekener.com/blog/democratize-data-analytics-customer-data-platform-B2B)\n:::\n:::\n:::\n\n------------------------------------------------------------------------\n\n### Technology Challenges\n\n::: columns\n::: {.column width=\"50%\"}\n-   Mainframe computing tend to have low usability and low accessibility.\n\n-   Desktop computing tend to have high usability but low accessibility.\n\n-   Web-based computing (including mobile computing) are highly accesible but with relatively low capability.\n:::\n\n::: {.column width=\"50%\"}\n![](img/image3.jpg)\n:::\n:::\n\n------------------------------------------------------------------------\n\n### Web-based data visualisation\n\n::: columns\n::: {.column width=\"50%\"}\n-   The break-through is Rich Internet Applications (RIA)\n:::\n\n::: {.column width=\"50%\"}\n![](img/image3-1.jpg)\n:::\n:::\n\n::: {style=\"font-size: 0.75em\"}\nReference: [Rich Internet Applications](https://www.computerworld.com/article/2551058/rich-internet-applications.html)\n:::\n\n------------------------------------------------------------------------\n\n### Development of RIA\n\n::: columns\n::: {.column width=\"50%\"}\n#### First generation RIA data visualisation (2000\\~)\n\n-   Adobe Flex Builder\n    -   [Flare](http://flare.prefuse.org/)\n-   Microsoft Silverlight\n-   JavaFX\n:::\n\n::: {.column width=\"50%\"}\n#### Second generation RIA data visualisation (2010\\~)\n\n-   HTML 5 + JavaScript + SVG + CSS\n    -   Client-side rendering\n    -   No plug-in is required\n    -   Mobile computing enabled\n-   [D3.js](https://d3js.org/) - Data Driven Document\n:::\n:::\n\n------------------------------------------------------------------------\n\n### Methodological Challenges\n\n::: columns\n::: {.column width=\"50%\"}\n-   Lack of analysis functions.\n\n-   Not reproducible.\n\n-   Not extendable.\n\n-   Require to learn multiple technologies and methods.\n:::\n\n::: {.column width=\"50%\"}\n![](img/image4.jpg)\n:::\n:::\n\n## Getting to Know Shiny\n\n### Shiny: Overview\n\n::: columns\n::: {.column width=\"50%\"}\n-   Shiny is an open source package from [Posit](https://posit.co/) (formally called RStudio).\n\n-   It provides a **web application framework** to create interactive web applications (visualization) called \"Shiny apps\".\n\n-   To learn more about Shiny, visit its [homepage](https://shiny.rstudio.com/)\n:::\n\n::: {.column width=\"50%\"}\n![](img/image5.jpg)\n:::\n:::\n\n## Getting to Know Shiny\n\n### What is so special about Shiny?\n\n::: columns\n::: {.column width=\"50%\"}\nIt allows R users:\n\n-   to build and share highly interactive web-enabled applications without having to invest significant among of time and efforts to master core web design technologies such as html5, Javascript and CSS.\n\n-   to integrate the analytical and visualisation packages of R without having to change from one programming language to another.\n:::\n\n::: {.column width=\"50%\"}\n![](img/image6.jpg)\n:::\n:::\n\n## Getting to Know Shiny\n\n### Understanding the architecture\n\n-   Every Shiny app is maintained by a computer running R.\n\n![](img/image7.jpg)\n\n## Getting to Know Shiny\n\n### The Structure of a Shiny app\n\n::: columns\n::: {.column width=\"50%\"}\n-   A Shiny app comprises of two components, namely:\n    -   a user-interface script, and\n    -   a server script.\n:::\n\n::: {.column width=\"50%\"}\n![](img/image7-1.jpg)\n:::\n:::\n\n## Getting to Know Shiny\n\n### Shiny's user-interface, *ui.R*\n\n-   The *ui.R* script controls the layout and appearance of a shiny app.\n    -   It is defined in a source script name *ui.R*.\n\n    -   Actually, *ui* is a web document that the user gets to see, it is based on the famous Twitter bootstrap framework, which makes the look and layout highly customizable and fully responsive.\n\n    -   In fact, you only need to know R and how to use the shiny package to build a pretty web application. Also, a little knowledge of HTML, CSS, and JavaScript may help.\n\n## Getting to Know Shiny\n\n### Shiny's server *server.R*\n\n-   The *server.R* script contains the instructions that your computer needs to build your Shiny app.\n\n-   You are expected to:\n\n    -   know how to programme with R.\n    -   familiar with Tidyverse, specifically dplyr, tidyr and ggplot2\n\n## Getting to Know Shiny\n\n### Shiny Examples\n\nThe Shiny package has eleven built-in examples that each demonstrates how Shiny works.\n\n![](img/image7-2.jpg)\n\n## Getting to Know Shiny\n\n### Running Shiny example\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nrunExample(\"01_hello\")\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n![](img/image7-3.jpg){fig-align=\"center\" width=\"543\"}\n:::\n:::\n\n## Building a Shiny app\n\n-   A Shiny app can be in a form of a single file called ***app.R***.\n-   Alternatively, a Shiny app can be also created using separate ***ui.R*** and ***server.R*** files.\n-   The seperate files way is preferred when the app is complex and involves more codes.\n\n![](img/image8.jpg)\n\n------------------------------------------------------------------------\n\n### A basic Shiny app script\n\n![](img/image9.jpg)\n\n------------------------------------------------------------------------\n\n### Important tips of Shiny app file\n\n::: columns\n::: {.column width=\"50%\"}\n::: callout-tip\n-   It is very important that the name of the file is *app.R*, otherwise it would not be recognized as a Shiny app.\n\n-   You should not have any R code after the `shinyApp(ui = ui, server = server)` line. That line needs to be the last line in your file.\n\n-   It is good practice to place this app in its own folder, and not in a folder that already has other R scripts or files, unless those other files are used by your app.\n:::\n:::\n:::\n\n------------------------------------------------------------------------\n\n### Loading the dataset\n\n::: columns\n::: {.column width=\"65%\"}\n::: {style=\"font-size: 1.35em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(shiny, sf, tmap,\n               bslib, tidyverse)\n\nhunan <- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\ndata <- read_csv(\"data/aspatial/Hunan_2012.csv\")\nhunan_data <- left_join(hunan, data,\n                        by = c(\"County\" = \"COUNTY\"))\n\nui <- fluidPage()\nserver <- function(input, output){}\n\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n:::\n:::\n\n::: {.column width=\"35%\"}\n-   Make sure that the data file path and file name are correct.\n\n-   To check if the dataset has been added correctly, you can add a `print()` argument after reading the data.\n:::\n:::\n\n## Shiny Layout\n\n-   Shiny ui.R scripts use the function *fluidPage* to create a display that automatically adjusts to the dimensions of your user's browser window.\n\n-   You lay out your app by placing elements in the fluidPage function.\n\n-   *titlePanel* and *sidebarLayout* are the two most popular elements to add to fluidPage. They create a basic Shiny app with a sidebar.\n\n## Shiny Layout Panels\n\n-   Panels are used to group multiple elements into a single element that has its own properties.\n\n-   Especially important and useful for complex apps with a large number of inputs and outputs such that it might not be clear to the user where to get started.\n\n![](img/image10.jpg)\n\n------------------------------------------------------------------------\n\n### Working with `titlePanel`\n\n::: columns\n::: {.column width=\"60%\"}\n-   [`titlePanel()`](https://shiny.rstudio.com/reference/shiny/1.7.4/titlepanel) is used to add the application title.\n\n::: {style=\"font-size: 1.20em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(shiny, sf, tmap,\n               bslib, tidyverse)\n\nhunan <- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\ndata <- read_csv(\"data/aspatial/Hunan_2012.csv\")\nhunan_data <- left_join(hunan, data,\n                        by = c(\"County\" = \"COUNTY\"))\n\nui <- fluidPage(\n  titlePanel(\"Choropleth Mapping\")\n)\nserver <- function(input, output){}\n\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n:::\n:::\n\n::: {.column width=\"40%\"}\n![](img/image18.jpg)\n:::\n:::\n\n------------------------------------------------------------------------\n\n### Shiny Layout Panel : `sidebarLayout()`\n\n::: columns\n::: {.column width=\"50%\"}\n-   [`sidebarLayout()`](https://shiny.rstudio.com/reference/shiny/1.7.4/sidebarlayout) always takes two arguments:\n    -   `sidebarPanel()` function output\n    -   `mainPanel()` function output\n-   These functions place content in either the sidebar or the main panels.\n-   The `sidebarPanel()` will appear on the left side of your app by default. You can move it to the right side by giving `sidebarLayout()` the optional argument position = \"right\".\n:::\n\n::: {.column width=\"50%\"}\n![](img/image15a.jpg){width=\"547\"}\n\n![](img/image15b.jpg)\n:::\n:::\n\n------------------------------------------------------------------------\n\n### Hands-on Exercise: Working with `sidebarLayout()`\n\n::: columns\n::: {.column width=\"50%\"}\nLets add the highlighted codes into the original code chunk.\n\n![](img/image31.jpg)\n:::\n\n::: {.column width=\"50%\"}\nRefresh Shiny App and your screen should look similar to the figure below.\n\n![](img/image19.jpg)\n\n::: callout-note\nNote that in a fluid design your sidebar and other elements may \"collapse\" if your browser view is not wide enough.\n:::\n:::\n:::\n\n## Shiny Inputs\n\n### An overview of Shiny Inputs\n\n::: columns\n::: {.column width=\"50%\"}\n-   Inputs are what gives users a way to interact with a Shiny app.\n\n-   Shiny provides many input functions to support many kinds of interactions that the user could have with an app.\n:::\n\n::: {.column width=\"50%\"}\n![](img/image26.jpg)\n:::\n:::\n\nReference: Refer to [2 Basic UI](https://mastering-shiny.org/basic-ui.html) of Master Shiny to learn more about Shiny UI usage and arguments.\n\n## Shiny Inputs\n\n### Inputs syntax\n\n::: columns\n::: {.column width=\"50%\"}\n-   All input functions have the same first two arguments: inputId and label.\n-   The inputId will be the name that Shiny will use to refer to this input when you want to retrieve its current value.\n-   It is important to note that every input must have a unique inputId.\n-   The label argument specifies the text in the display label that goes along with the input widget.\n-   Every input can also have multiple other arguments specific to that input type.\n:::\n\n::: {.column width=\"50%\"}\n![](img/image27.jpg)\n:::\n:::\n\n------------------------------------------------------------------------\n\n### Hands-on Exercise: Adding inputs\n\nAdding inputs to the UI by using [`selectInput()`](https://shiny.rstudio.com/reference/shiny/1.7.4/selectinput) and [`sliderInput()`](https://shiny.rstudio.com/reference/shiny/1.7.4/sliderinput).\n\n![](img/image32.jpg)\n\n## Shiny `Output()`\n\n### An overview of Shiny `Output()`\n\n-   After creating all the inputs, we should add elements to the UI to display the outputs.\n-   To display output, add it to `fluidPage()` with an `Output()` function.\n\n![](img/image20.jpg)\n\n::: callout-note\n-   Similarly to the input functions, all the output functions have a outputId argument that is used to identify each output, and this argument must be unique for each output.\n-   Each output needs to be constructed in the server code later.\n:::\n\n## Shiny `Output()`\n\n### Shiny `Output()` options\n\n::: columns\n::: {.column width=\"50%\"}\n-   Outputs can be any object that R creates and that we want to display in our app - such as a plot, a table, or text.\n:::\n\n::: {.column width=\"50%\"}\n![](img/image28.jpg)\n:::\n:::\n\n------------------------------------------------------------------------\n\n### Hands-on Exercise:\n\n::: columns\n::: {.column width=\"50%\"}\nAdding [`plotOutput()`](https://shiny.rstudio.com/reference/shiny/1.7.4/plotoutput)\n\n![](img/image33.jpg)\n:::\n:::\n\n## Shiny server.R\n\n### Building an output\n\nThere are three rules to build an output in Shiny, they are:\n\n-   Save the output object into the output list (remember the app template - every server function has an output argument).\n\n-   Build the object with a `render()` function, where is the type of output.\n\n-   Access input values using the input list (every server function has an input argument)\n\n::: callout-note\nThe third rule is only required if you want your output to depend on some input.\n:::\n\n## Shiny server.R\n\n### A generic Shiny `render()` syntax\n\n![](img/image21.jpg)\n\n## Shiny server.R\n\n### Shiny `render()`\n\n![](img/image29.jpg)\n\n------------------------------------------------------------------------\n\n### Hands-on Exercise: Building a basic output\n\n::: columns\n::: {.column width=\"50%\"}\nLet's first see how to build a very basic output using [`renderPlot()`](https://shiny.rstudio.com/reference/shiny/1.7.4/renderplot). We'll create a plot and send it to the ***mapPlot*** output.\n\n![](img/image34.jpg)\n:::\n\n::: {.column width=\"50%\"}\n::: callout-note\n-   This simple code shows the first two rules: we're creating a plot inside the `renderPlot()` function, and assigning it to ***distPlot*** in the output list.\n-   Remember that every output created in the UI must have a unique ID, now we see why. In order to attach an R object to an output with ID x, we assign the R object to ***output\\$distPlot***.\n-   Since ***distPlot*** was defined as a ***plotOutput***, we must use the `renderPlot()` function, and we must create a plot inside the `renderPlot()` function.\n:::\n:::\n:::\n\n## The shinyApp()\n\n::: columns\n::: {.column width=\"50%\"}\n::: callout-important\n-   It is important to add *shinyApp()* at the end of your Shiny application.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n:::\n:::\n\n## Programming Shiny: Survival Tip!\n\n::: callout-tip\n-   Always run the entire script, not just up to the point where you're developing code.\n\n-   Sometimes the best way to see what's wrong is to run the app and review the error.\n\n-   Watch out for commas!\n:::\n\n## Building Shiny Application: Survival Tip!\n\n::: columns\n::: {.column width=\"50%\"}\n### What can we learn from Lego?\n\n![](img/image30.jpg){width=\"464\"}\n:::\n\n::: {.column width=\"50%\"}\n-   Sketch the storyboard\n-   Building the app incrementally\n    -   Using prototyping approach\n    -   Start as simple as possible\n    -   Adding features one at a time\n-   Save -\\> Run App\n:::\n:::\n\n## References\n\n-   Hadley Wickham (2021) [**Mastering Shiny**](https://mastering-shiny.org/index.html), O'Reilly Media. This is a highly recommended book.\n\n-   [Building Web Applications with Shiny](https://rstudio-education.github.io/shiny-course/), especially Module 1 and 2.\n\n-   [Shiny Three Parts Tutorial](https://shiny.rstudio.com/tutorial/).\n\n-   [Online Function reference](https://shiny.rstudio.com/reference/shiny/1.5.0/)\n\n-   [The basic parts of a Shiny app](https://shiny.rstudio.com/articles/basics.html)\n\n-   [How to build a Shiny app](https://shiny.rstudio.com/articles/build.html)\n\n-   [The Shiny Cheat sheet](https://shiny.rstudio.com/articles/cheatsheet.html)\n\n**Beyond Uncle Google!** Last but not least, when you need help\n\n-   [How to get help](https://shiny.rstudio.com/articles/help.html)\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}