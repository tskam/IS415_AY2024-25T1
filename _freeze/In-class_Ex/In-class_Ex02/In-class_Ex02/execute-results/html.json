{
  "hash": "0d85b4beffa62d620d351d48154dd75f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 2\"\nauthor: \"Dr. Kam Tin Seong\"\ndate: \"August 26, 2024\"\nformat: \n  revealjs:\n    width: 1600\n    height: 900\n    show-notes: false\n    slide-number: true\n    show-slide-number: all\ndate-format: \"DD MMM YYYY\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n\n## Getting started\n\n:::: panel-tabset\n### The task\n\nFor the purpose of this in-class exercise, **tidyverse**and **sf** packages will be used. Write a code chunk to check if these two packages have been installed in R. If yes, load them in R environment.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf)\n```\n:::\n\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n::::\n\n## Working with Master Plan Planning Sub-zone Data\n\n:::: panel-tabset\n### The task\n\n1.  Create a sub-folder called data in In-class_Ex02 folder.\n2.  If necessary visit data.gov.sg and download *Master Plan 2014 Subzone Boundary (Web)* from the portal. You are required to download both the ESRI shapefile and kml file.\n3.  Write a code chunk to import *Master Plan 2014 Subzone Boundary (Web)* in shapefile and kml save them in sf simple features data frame.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\nThis code chunk imports shapefile.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz14_shp <- st_read(dsn = \"data/\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\tskam\\IS415_AY2024-25T1\\In-class_Ex\\In-class_Ex02\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\nThis code chunk imports kml file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz14_kml <- st_read(\"data/MasterPlan2014SubzoneBoundaryWebKML.kml\")\n```\n:::\n\n\n:::\n::::\n\n## Working with Master Plan Planning Sub-zone Data\n\n:::: panel-tabset\n### The task\n\n1.  Write a code chunk to export *mpsz14_shp* sf data.frame into **kml** file save the output in data sub-folder. Name the output file *MP14_SUBZONE_WEB_PL*.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_write(mpsz14_shp, \n         \"data/MP14_SUBZONE_WEB_PL.kml\",\n         delete_dsn = TRUE)\n```\n:::\n\n\n:::\n::::\n\n## Working with Pre-school Location Data\n\n:::: panel-tabset\n### The task\n\n1.  If necessary visit data.gov.sg and download *Pre-Schools Location* from the portal. You are required to download both the kml and geojson files.\n2.  Write a code chunk to import *Pre-Schools Location* in kml geojson save them in sf simple features data frame.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\nThis code chunk imports kml file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool_kml <- st_read(\"data/PreSchoolsLocation.kml\")\n```\n:::\n\n\n\nThis code chunk imports geojson file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool_geojson <- st_read(\"data/PreSchoolsLocation.geojson\") \n```\n:::\n\n\n:::\n::::\n\n## Working with Master Plan 2019 Subzone Boundary Data\n\n::::: panel-tabset\n### The task\n\n1.  Visit data.gov.sg and download *Master Plan 2019 Subzone Boundary (No Sea)* from the portal. You are required to download both the kml file.\n2.  Move *MPSZ-2019* shapefile provided for In-class Exercise 1 folder on elearn to data sub-folder of In-class_Ex02.\n3.  Write a code chunk to import *Master Plan 2019 Subzone Boundary (No SEA)* kml and MPSZ-2019 into sf simple feature data.frame.\n\n### To import shapefile\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- st_read(dsn = \"data/\",\n                layer = \"MPSZ-2019\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `D:\\tskam\\IS415_AY2024-25T1\\In-class_Ex\\In-class_Ex02\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n:::\n\n### To import kml\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_kml <- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `D:\\tskam\\IS415_AY2024-25T1\\In-class_Ex\\In-class_Ex02\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## Handling Coordinate Systems\n\n### Checking coordinate system\n\n:::: panel-tabset\n### The task\n\nWrite a code chunk to check the project of the imported sf objects.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz19_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n:::\n::::\n\n## Handling Coordinate Systems\n\n### Transforming coordinate system\n\n::::: panel-tabset\n### The task\n\nRe-write the code chunk to import the Master Plan Sub-zone 2019 and Pre-schools Location with proper transformation\n\n### To import MPSZ-2019\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- st_read(dsn = \"data/\",\n                layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `D:\\tskam\\IS415_AY2024-25T1\\In-class_Ex\\In-class_Ex02\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n:::\n\n### To import PreSchoolsLocation.kml\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool <- st_read(\"data/PreSchoolsLocation.kml\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `D:\\tskam\\IS415_AY2024-25T1\\In-class_Ex\\In-class_Ex02\\data\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## Geospatial Data Wrangling\n\n### Point-in-Polygon count\n\n:::: panel-tabset\n### The task\n\nWrite a code chunk to count the number of pre-schools in each planning sub-zone.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- mpsz19_shp %>%\n  mutate(`PreSch Count` = lengths(\n    st_intersects(mpsz19_shp, preschool)))\n```\n:::\n\n\n:::\n::::\n\n## Geospatial Data Wrangling\n\n### Computing density\n\n:::: panel-tabset\n### The task\n\nWrite a single line code to perform the following tasks:\n\n1.  Derive the area of each planning sub-zone.\n\n2.  Drop the unit of measurement of the area (i.e. m\\^2)\n\n3.  Calculate the density of pre-school at the planning sub-zone level.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- mpsz19_shp %>%\n  mutate(Area = units::drop_units(\n    st_area(.)),\n    `PreSch Density` = `PreSch Count` / Area * 1000000\n  )\n```\n:::\n\n\n:::\n::::\n\n## Statistical Analysis\n\n:::: panel-tabset\n### The task\n\nUsing appropriate Exploratory Data Analysis (EDA) and Confirmatory Data Analysis (CDA) methods to explore and confirm the statistical relationship between Pre-school Density and Pre-school count.\n\nTip: Refer to [`ggscatterstats()`](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggscatterstats.html) of **ggstatsplot** package.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz$`PreSch Density` <- as.numeric(as.character(mpsz19_shp$`PreSch Density`))\nmpsz$`PreSch Count` <- as.numeric(as.character(mpsz19_shp$`PreSch Count`)) \nmpsz19_shp <- as.data.frame(mpsz19_shp)\n\nggscatterstats(data = mpsz19_shp,\n               x = `PreSch Density`,\n               y = `PreSch Count`,\n               type = \"parametric\")\n```\n:::\n\n\n:::\n\n### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-revealjs/unnamed-chunk-16-1.png){width=768}\n:::\n:::\n\n\n::::\n\n## Working with Population Data\n\n:::: panel-tabset\n### The task\n\n1.  Visit and extract the latest Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling from Singstat homepage.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/respopagesextod2023.csv\")\n```\n:::\n\n\n:::\n::::\n\n## Data Wrangling\n\n:::: panel-tabset\n### The task\n\n1.  Write a code chunk to prepare a data.frame showing population by Planning Area and Planning subzone\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata %>% \n  group_by(PA, SZ, AG) %>% \n  summarise(`POP`=sum(`Pop`)) %>%  \n  ungroup() %>% \n  pivot_wider(names_from=AG,\n              values_from = POP)\n\ncolnames(popdata2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n```\n\n\n:::\n:::\n\n\n:::\n::::\n\n## Data Processing\n\n:::: panel-tabset\n### The task\n\nWrite a code chunk to derive a tibble data.framewith the following fields PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY where by:\n\n-   YOUNG: age group 0 to 4 until age groyup 20 to 24,\n-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,\n-   AGED: age group 65 and above,\n-   TOTAL: all age group, and\n-   DEPENDENCY: the ratio between young and aged against economy active group.\n\n### The code\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata2023 %>%\n  mutate(YOUNG=rowSums(.[3:6]) # Aged 0 - 24, 10 - 24\n         +rowSums(.[14])) %>% # Aged 5 - 9\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+ # Aged 25 - 59\n  rowSums(.[15])) %>%  # Aged 60 -64\n  mutate(`AGED`=rowSums(.[16:21])) %>%\n  mutate(`TOTAL`=rowSums(.[3:21])) %>%\n  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)\n  / `ECONOMY ACTIVE`) %>% \n  select(`PA`, `SZ`, `YOUNG`, \n         `ECONOMY ACTIVE`, `AGED`,\n         `TOTAL`, `DEPENDENCY`)\n```\n:::\n\n\n:::\n::::\n\n## Joining popdata2023 and mpsz19_shp\n\nThe code chunk below is used to change data in the PA and SZ fields into uppercase.\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata2023 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) \n```\n:::\n\n\n:::\n\nThe code chunk below is used to perform left-join whereby the join fields are *SUBZONE_N* from the *mpsz19_shp* sf data.frame and *SZ* from the *popdata2023* data.frame.\n\n::: {style=\"font-size: 1.50em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2023 <- left_join(mpsz19_shp, popdata2023,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\n:::\n\n## Choropleth Map of Dependency Ratio by Planning Subzone\n\n:::: panel-tabset\n### The map\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n### The code\n\n::: {style=\"font-size: 1.20em\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2023)+\n  \n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  \n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            bg.color = \"#E4D5C9\",\n            frame = F) +\n  \n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 1.5) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics (DOS)\", \n             position = c(\"left\", \"bottom\"))\n```\n:::\n\n\n:::\n::::\n",
    "supporting": [
      "In-class_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}